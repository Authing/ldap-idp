{"version":3,"file":"ldap-idp.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = `mongodb://${ldapdb.user}:${ldapdb.password}@${\n  ldapdb.replicaSet.addr\n}/${ldapdb.dbname}?readPreference=secondaryPreferred&replicaSet=${\n  ldapdb.replicaSet.name\n}`;\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userpools');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  const initLdapRoutes: any = function(client: any) {\n    let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n    const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n    /*\n      DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n      ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n    */\n\n    server.bind(bindDN, async function(_req: any, res: any, next: any) {\n      const o: any = _req.dn.rdns[1].attrs;\n      let currentClientId: any = '';\n      if (o['o']) {\n        currentClientId = o.o.value;\n      } else {\n        const rdns: any = _req.dn.rdns;\n        for (let i = 0; i < rdns.length; i++) {\n          const rdn = rdns[i];\n          for (let key in rdn.attrs) {\n            if (key === 'o') {\n              currentClientId = rdn.attrs.o.value;\n            }\n          }\n        }\n      }\n\n      console.log(_req.dn.rdns.toString());\n\n      const dnString = _req.dn.rdns.toString();\n\n      /*\n        需要分两种类型进行验证\n        1. 只用 client 进行查询，使用 secret 进行验证\n        2. 对单个用户进行查询，使用用户真实密码进行验证\n      */\n\n      if (dnString.indexOf('uid=') > -1) {\n        try {\n          const rdns: any = _req.dn.rdns;\n          let uid: string = '';\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'uid') {\n                uid = rdn.attrs.uid.value;\n              }\n            }\n          }\n\n          const users: any = await findUsers({\n            registerInClient: ObjectId(currentClientId),\n            _id: ObjectId(uid),\n          });\n\n          const user: any = users[0];\n\n          if (user.password) {\n            if (currentClientId.toString() === client._id.toString()) {\n              const authing = await new Authing({\n                clientId: currentClientId,\n                secret: client.secret,\n              });\n\n              const loginOpt = {\n                username: user.username,\n                password: _req.credentials,\n              };\n              await authing.login(loginOpt);\n            }\n          }\n        } catch (error) {\n          return next(new ldap.InvalidCredentialsError(JSON.stringify(error)));\n        }\n      } else {\n        if (\n          !(\n            currentClientId.toString() === client._id.toString() &&\n            _req.credentials.toString() === client.secret.toString()\n          )\n        ) {\n          return next(new ldap.InvalidCredentialsError());\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    const authorize = (_req: any, _res: any, next: any) => {\n      if (!_req.connection.ldap.bindDN.equals(bindDN))\n        return next(new ldap.InsufficientAccessRightsError());\n      return next();\n    };\n\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    const pre: any = [authorize, loadCurrentClientId];\n\n    server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n      const filterKey: any = req.filter.attribute;\n      const filterValue: any = req.filter.value || '*';\n\n      // const queryDN = req.dn.toString();\n\n      const filterKeyMapping: any = {\n        cn: 'username',\n        gid: '_id',\n        uid: '_id',\n      };\n\n      let queryOptions: any = {\n        registerInClient: ObjectId(req.currentClientId),\n      };\n\n      let users: any;\n      req.users = {};\n\n      if (filterKeyMapping[filterKey]) {\n        const key: any = filterKeyMapping[filterKey];\n        queryOptions[key] = key === '_id' ? ObjectId(filterValue) : filterValue;\n        users = await findUsers(queryOptions);\n\n        const currentUser: any = users[0];\n        const cn: any = currentUser.username;\n        const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n          req.currentClientId\n        }, dc=authing, dc=cn`;\n        currentUser['cn'] = cn;\n        currentUser['gid'] = currentUser._id;\n        currentUser['uid'] = currentUser._id;\n        currentUser['objectclass'] = 'users';\n\n        delete currentUser['__v'];\n        delete currentUser['isDeleted'];\n        delete currentUser['salt'];\n\n        res.send({\n          dn,\n          attributes: currentUser,\n        });\n      } else {\n        users = await findUsers(queryOptions);\n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          req.users[dn] = {\n            dn,\n            attributes: currentUser,\n          };\n\n          Object.keys(req.users).forEach(function(key) {\n            if (req.filter.matches(req.users[key].attributes)) {\n              res.send(req.users[key]);\n            }\n          });\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.ConstraintViolationError('cn required'));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (users && users.length > 0) {\n        return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n      }\n\n      try {\n        const authing = await new Authing({\n          clientId: req.currentClientId,\n          secret: client.secret,\n        });\n\n        await authing.register({\n          username: cn.value,\n          nickname: cn.value,\n          unionid: `ldap|${cn.value}`,\n          registerMethod: `ldap:sso::from-ldapadd`,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      try {\n        await removeUser({\n          registerInClient: ObjectId(req.currentClientId),\n          username: cn.value,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n      const cn: any = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      if (!req.changes.length)\n        return next(new ldap.ProtocolError('changes required'));\n\n      const users: any = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      const user: any = users[0];\n\n      let mod: any, authing: any;\n\n      for (var i = 0; i < req.changes.length; i++) {\n        mod = req.changes[i].modification;\n        switch (req.changes[i].operation) {\n          case 'replace':\n            const typeMapping: any = {\n              userpassword: 'password',\n              mail: 'email',\n              cn: ['username'],\n            };\n            // 不允许修改密码，因为无法提供 oldPassword，日后可以改善下\n            const notAllowedTypes = ['gid', 'uid', '_id', 'userpassword'];\n            if (notAllowedTypes.indexOf(mod.type) > -1) {\n              return next(\n                new ldap.UnwillingToPerformError(\n                  `${mod.type} is not allowed to modify`\n                )\n              );\n            }\n\n            let fieldModified: any = mod.type;\n\n            if (typeMapping[mod.type]) {\n              fieldModified = typeMapping[mod.type];\n            }\n\n            try {\n              authing =\n                authing ||\n                (await new Authing({\n                  clientId: req.currentClientId,\n                  secret: client.secret,\n                }));\n\n              if (\n                fieldModified instanceof String ||\n                typeof fieldModified === 'string'\n              ) {\n                let query: any = {\n                  _id: user._id,\n                };\n                const field: any = fieldModified;\n                query[field] = mod.vals[0];\n                await authing.update(query);\n              } else {\n                let query: any = {\n                  _id: users[0]._id,\n                };\n                for (let i = 0; i < fieldModified.length; i++) {\n                  query[fieldModified[i]] = mod.vals[0];\n                }\n                await authing.update(query);\n              }\n            } catch (error) {\n              return next(new ldap.UnavailableError(JSON.stringify(error)));\n            }\n            break;\n          case 'add':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n          case 'delete':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n        }\n      }\n\n      res.end();\n      return next();\n    });\n  };\n\n  findClients((clients: any) => {\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n      initLdapRoutes(client);\n    }\n\n    const collection = db.collection('userpools');\n    const changeStream = collection.watch();\n    changeStream.on('change', (oplog: any) => {\n      // process next document\n      const operationType = oplog.operationType;\n      if (operationType === 'insert') {\n        const client = oplog.fullDocument;\n        console.log('add client to ldap', client);\n        initLdapRoutes(client);\n      }\n    });\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","parseDN","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","replicaSet","addr","dbname","name","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","findClients","callback","clients","isDeleted","removeUser","query","_resolve","_reject","updateOne","$set","then","users","catch","initLdapRoutes","bindDN","_id","SUFFIX","bind","_req","res","next","o","dn","rdns","attrs","currentClientId","value","i","length","rdn","key","toString","dnString","indexOf","uid","registerInClient","authing","clientId","secret","loginOpt","username","credentials","login","error","InvalidCredentialsError","JSON","stringify","end","authorize","_res","connection","equals","InsufficientAccessRightsError","loadCurrentClientId","req","pre","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","changeStream","watch","on","oplog","operationType","fullDocument","listen"],"mappings":"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"}