{"version":3,"file":"ldap-idp.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n  console.log('Connected successfully to server');\n  const db = client.db(ldapdb.dbname);\n\n  createLDAPServer(db);\n\n  // const insertDocuments = function(db, callback) {\n  //   // Get the documents collection\n  //   const collection = db.collection('documents');\n  //   // Insert some documents\n  //   collection.insertMany([\n  //     {a : 1}, {a : 2}, {a : 3}\n  //   ], function(err, result) {\n  //     assert.equal(err, null);\n  //     assert.equal(3, result.result.n);\n  //     assert.equal(3, result.ops.length);\n  //     console.log(\"Inserted 3 documents into the collection\");\n  //     callback(result);\n  //   });\n  // }\n\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(callback: any, opts: any) {\n    const collection = db.collection('users');\n    opts['isDeleted'] = false;\n    collection.find(opts).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients.find({\n      isDeleted: false,\n    }).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  }\n\n  findClients((clients: any) => {\n  \n    const loadAuthingUsers = (req: any, _res: any, next: any) => {\n      let currentClientId: string = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for(let key in rdn.attrs) {\n          if (key === 'o') {\n            currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n\n      findUsers((users: any) => {\n        req.users = {};  \n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          req.users[currentUser._id] = {\n            dn: `cn=${currentUser.username ||\n              currentUser.email ||\n              currentUser.phone ||\n              currentUser.unionid},uid=${\n              currentUser._id\n            }, ou=users, o=${currentClientId}, dc=authing, dc=cn`,\n            attributes: {\n              cn:\n                currentUser.username ||\n                currentUser.email ||\n                currentUser.phone ||\n                currentUser.unionid,\n              uid: currentUser._id,\n              gid: currentUser._id,\n              unionid: currentUser.unionid,\n              email: currentUser.email,\n              phone: currentUser.phone,\n              nickname: currentUser.nickname,\n              username: currentUser.username,\n              photo: currentUser.photo,\n              emailVerified: currentUser.emailVerified,\n              oauth: currentUser.oauth,\n              token: currentUser.token,\n              registerInClient: currentUser.registerInClient,\n              loginsCount: currentUser.loginsCount,\n              lastIP: currentUser.lastIP,\n              company: currentUser.company,\n              objectclass: 'authingUser',\n            },\n          };\n        }\n  \n        return next();\n      }, {\n        registerInClient: ObjectId(currentClientId)\n      });\n    }    \n\n    for(let i = 0; i < clients.length; i++) {\n      const client = clients[i];\n      const SUFFIX: string = `o=${client._id}, ou=users, dc=authing, dc=cn`;\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D cn=root -LLL -b \"o=authingId,ou=users,dc=authing,dc=cn\" cn=root\n      */\n    \n      server.bind(bindDN, function(_req: any, res: any, next: any) {\n        // if (req.dn.toString() !== 'cn=root')\n        //   return next(new ldap.InvalidCredentialsError());\n    \n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      }\n    \n      const pre: any = [authorize, loadAuthingUsers];\n    \n      server.search(SUFFIX, pre, function(req: any, res: any, next: any) {\n        Object.keys(req.users).forEach(function(k) {\n          if (req.filter.matches(req.users[k].attributes)) res.send(req.users[k]);\n        });\n    \n        res.end();\n        return next();\n      });\n    }\n  \n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","parseDN","MongoClient","ObjectId","ldapdb","assert","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","callback","opts","collection","find","toArray","err","docs","findClients","clients","isDeleted","loadAuthingUsers","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","users","currentUser","_id","username","email","phone","unionid","attributes","cn","uid","gid","nickname","photo","emailVerified","oauth","token","registerInClient","loginsCount","lastIP","company","objectclass","SUFFIX","bindDN","bind","_req","res","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","Object","keys","forEach","k","filter","matches","send","listen"],"mappings":"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"}