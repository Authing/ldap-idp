{"version":3,"file":"ldap-idp.cjs.production.js","sources":["../src/config.ts","../src/index.ts"],"sourcesContent":["export default {\n  domainComponent: ['authing', 'cn'],\n  authing: {\n    graphqlEndPoint: {\n      core: 'https://core.authing.cn/graphql',\n    },\n    passwordEncPublicKey: `-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4xKeUgQ+Aoz7TLfAfs9+paePb\n5KIofVthEopwrXFkp8OCeocaTHt9ICjTT2QeJh6cZaDaArfZ873GPUn00eOIZ7Ae\n+TiA2BKHbCvloW3w5Lnqm70iSsUi5Fmu9/2+68GZRH9L7Mlh8cFksCicW2Y2W2uM\nGKl64GDcIq3au+aqJQIDAQAB\n-----END PUBLIC KEY-----`,\n  },\n};\n","const ldap = require('ldapjs');\n// const parseDN = require('ldapjs').parseDN;\n// const fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\nimport config from './config';\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = `mongodb://${ldapdb.user}:${ldapdb.password}@${\n  ldapdb.replicaSet.addr\n}/${ldapdb.dbname}?readPreference=secondaryPreferred&replicaSet=${\n  ldapdb.replicaSet.name\n}`;\n\nprocess.on('unhandledRejection', err => {\n  console.log('全局reject');\n  console.log(err);\n});\nfunction generateDc(domainComponent: Array<string>, seperator: string = ',') {\n  let arr = domainComponent.map(item => 'dc=' + item);\n  let dcStr = arr.join(seperator);\n  return dcStr;\n}\n// uncaughtException 避免程序崩溃\nprocess.on('uncaughtException', function(err) {\n  console.log(err);\n});\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userpools');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  const initLdapRoutes: any = function(client: any) {\n    let bindDN: string = `ou=users,o=${client._id},${generateDc(\n      config.domainComponent\n    )}`;\n    const SUFFIX: string = `ou=users, o=${client._id}, ${generateDc(\n      config.domainComponent,\n      ', '\n    )}`;\n\n    /*\n      DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n      ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n    */\n\n    server.bind(bindDN, async function(_req: any, res: any, next: any) {\n      const o: any = _req.dn.rdns[1].attrs;\n      let currentClientId: any = '';\n      if (o['o']) {\n        currentClientId = o.o.value;\n      } else {\n        const rdns: any = _req.dn.rdns;\n        for (let i = 0; i < rdns.length; i++) {\n          const rdn = rdns[i];\n          for (let key in rdn.attrs) {\n            if (key === 'o') {\n              currentClientId = rdn.attrs.o.value;\n            }\n          }\n        }\n      }\n\n      console.log(_req.dn.rdns.toString());\n\n      const dnString = _req.dn.rdns.toString();\n\n      /*\n        需要分两种类型进行验证\n        1. 只用 client 进行查询，使用 secret 进行验证\n        2. 对单个用户进行查询，使用用户真实密码进行验证\n      */\n\n      if (dnString.indexOf('uid=') > -1) {\n        try {\n          const rdns: any = _req.dn.rdns;\n          let uid: string = '';\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'uid') {\n                uid = rdn.attrs.uid.value;\n              }\n            }\n          }\n\n          const users: any = await findUsers({\n            registerInClient: ObjectId(currentClientId),\n            _id: ObjectId(uid),\n          });\n\n          const user: any = users[0];\n\n          if (user.password) {\n            if (currentClientId.toString() === client._id.toString()) {\n              const authing = new Authing({\n                userPoolId: currentClientId,\n                secret: client.secret,\n                host: {\n                  user: config.authing.graphqlEndPoint.core,\n                  oauth: config.authing.graphqlEndPoint.core,\n                },\n                passwordEncPublicKey: config.authing.passwordEncPublicKey,\n              });\n\n              const loginOpt = {\n                username: user.username,\n                password: _req.credentials,\n              };\n              await authing.login(loginOpt);\n            }\n          }\n        } catch (error) {\n          return next(new ldap.InvalidCredentialsError(JSON.stringify(error)));\n        }\n      } else {\n        if (\n          !(\n            currentClientId.toString() === client._id.toString() &&\n            _req.credentials.toString() === client.secret.toString()\n          )\n        ) {\n          return next(new ldap.InvalidCredentialsError());\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    const authorize = (_req: any, _res: any, next: any) => {\n      if (!_req.connection.ldap.bindDN.equals(bindDN))\n        return next(new ldap.InsufficientAccessRightsError());\n      return next();\n    };\n\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    const pre: any = [authorize, loadCurrentClientId];\n\n    server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n      const filterKey: any = req.filter.attribute;\n      const filterValue: any = req.filter.value || '*';\n\n      // const queryDN = req.dn.toString();\n\n      const filterKeyMapping: any = {\n        cn: 'username',\n        gid: '_id',\n        uid: '_id',\n      };\n\n      let queryOptions: any = {\n        registerInClient: ObjectId(req.currentClientId),\n      };\n\n      let users: any;\n      req.users = {};\n\n      if (filterKeyMapping[filterKey]) {\n        const key: any = filterKeyMapping[filterKey];\n        queryOptions[key] = key === '_id' ? ObjectId(filterValue) : filterValue;\n        users = await findUsers(queryOptions);\n\n        const currentUser: any = users[0];\n        const cn: any = currentUser.username;\n        const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n          req.currentClientId\n        }, ${generateDc(config.domainComponent, ', ')}`;\n        currentUser['cn'] = cn;\n        currentUser['gid'] = currentUser._id;\n        currentUser['uid'] = currentUser._id;\n        currentUser['objectclass'] = 'users';\n\n        delete currentUser['__v'];\n        delete currentUser['isDeleted'];\n        delete currentUser['salt'];\n\n        res.send({\n          dn,\n          attributes: currentUser,\n        });\n      } else {\n        users = await findUsers(queryOptions);\n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, ${generateDc(config.domainComponent, ', ')}`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          req.users[dn] = {\n            dn,\n            attributes: currentUser,\n          };\n\n          Object.keys(req.users).forEach(function(key) {\n            if (req.filter.matches(req.users[key].attributes)) {\n              res.send(req.users[key]);\n            }\n          });\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.ConstraintViolationError('cn required'));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (users && users.length > 0) {\n        return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n      }\n\n      try {\n        const authing = new Authing({\n          userPoolId: req.currentClientId,\n          secret: client.secret,\n          host: {\n            user: config.authing.graphqlEndPoint.core,\n            oauth: config.authing.graphqlEndPoint.core,\n          },\n          passwordEncPublicKey: config.authing.passwordEncPublicKey,\n        });\n\n        await authing.register({\n          username: cn.value,\n          nickname: cn.value,\n          unionid: `ldap|${cn.value}`,\n          registerMethod: `ldap:sso::from-ldapadd`,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      try {\n        await removeUser({\n          registerInClient: ObjectId(req.currentClientId),\n          username: cn.value,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n      const cn: any = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      if (!req.changes.length)\n        return next(new ldap.ProtocolError('changes required'));\n\n      const users: any = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      const user: any = users[0];\n\n      let mod: any, authing: any;\n\n      for (var i = 0; i < req.changes.length; i++) {\n        mod = req.changes[i].modification;\n        switch (req.changes[i].operation) {\n          case 'replace':\n            const typeMapping: any = {\n              userpassword: 'password',\n              mail: 'email',\n              cn: ['username'],\n            };\n            // 不允许修改密码，因为无法提供 oldPassword，日后可以改善下\n            const notAllowedTypes = ['gid', 'uid', '_id', 'userpassword'];\n            if (notAllowedTypes.indexOf(mod.type) > -1) {\n              return next(\n                new ldap.UnwillingToPerformError(\n                  `${mod.type} is not allowed to modify`\n                )\n              );\n            }\n\n            let fieldModified: any = mod.type;\n\n            if (typeMapping[mod.type]) {\n              fieldModified = typeMapping[mod.type];\n            }\n\n            try {\n              authing =\n                authing ||\n                new Authing({\n                  userPoolId: req.currentClientId,\n                  secret: client.secret,\n                  host: {\n                    user: config.authing.graphqlEndPoint.core,\n                    oauth: config.authing.graphqlEndPoint.core,\n                  },\n                  passwordEncPublicKey: config.authing.passwordEncPublicKey,\n                });\n\n              if (\n                fieldModified instanceof String ||\n                typeof fieldModified === 'string'\n              ) {\n                let query: any = {\n                  _id: user._id,\n                };\n                const field: any = fieldModified;\n                query[field] = mod.vals[0];\n                await authing.update(query);\n              } else {\n                let query: any = {\n                  _id: users[0]._id,\n                };\n                for (let i = 0; i < fieldModified.length; i++) {\n                  query[fieldModified[i]] = mod.vals[0];\n                }\n                await authing.update(query);\n              }\n            } catch (error) {\n              return next(new ldap.UnavailableError(JSON.stringify(error)));\n            }\n            break;\n          case 'add':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n          case 'delete':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n        }\n      }\n\n      res.end();\n      return next();\n    });\n  };\n\n  findClients((clients: any) => {\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n      initLdapRoutes(client);\n    }\n\n    const collection = db.collection('userpools');\n    const changeStream = collection.watch();\n    changeStream.on('change', (oplog: any) => {\n      // process next document\n      const operationType = oplog.operationType;\n      if (operationType === 'insert') {\n        const client = oplog.fullDocument;\n        console.log('add client to ldap', client);\n        initLdapRoutes(client);\n      }\n    });\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["domainComponent","authing","graphqlEndPoint","core","passwordEncPublicKey","ldap","require","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","replicaSet","addr","dbname","name","generateDc","seperator","arr","map","item","dcStr","join","process","on","err","console","log","connect","_err","client","equal","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","docs","initLdapRoutes","bindDN","_id","config","SUFFIX","bind","async","_req","res","next","o","dn","rdns","attrs","currentClientId","value","i","length","rdn","key","toString","dnString","indexOf","uid","users","registerInClient","userPoolId","secret","host","oauth","loginOpt","username","credentials","login","error","InvalidCredentialsError","JSON","stringify","end","pre","_res","connection","equals","InsufficientAccessRightsError","req","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","isDeleted","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","query","_resolve","_reject","updateOne","$set","then","catch","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","callback","clients","findClients","changeStream","watch","oplog","operationType","fullDocument","listen"],"mappings":"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"}