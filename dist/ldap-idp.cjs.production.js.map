{"version":3,"file":"ldap-idp.cjs.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  findClients((clients: any) => {\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n      const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n      */\n\n      server.bind(bindDN, async function(_req: any, res: any, next: any) {\n        const o: any = _req.dn.rdns[1].attrs;\n        let currentClientId: any = '';\n        if (o['o']) {\n          currentClientId = o.o.value;\n        }else {\n          const rdns: any = _req.dn.rdns;\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'o') {\n                currentClientId = rdn.attrs.o.value;\n              }\n            }\n          }\n        }\n\n        console.log(_req.dn.rdns.toString());\n\n        const dnString = _req.dn.rdns.toString();\n\n        /*\n          需要分两种类型进行验证\n          1. 只用 client 进行查询，使用 secret 进行验证\n          2. 对单个用户进行查询，使用用户真实密码进行验证\n        */\n\n        if (dnString.indexOf('uid=') > -1) {\n          try {\n\n            const rdns: any = _req.dn.rdns;\n            let uid: string = '';\n            for (let i = 0; i < rdns.length; i++) {\n              const rdn = rdns[i];\n              for (let key in rdn.attrs) {\n                if (key === 'uid') {\n                  uid = rdn.attrs.uid.value;\n                }\n              }\n            }\n            \n            const users: any = await findUsers({\n              registerInClient: ObjectId(currentClientId),\n              _id: ObjectId(uid),\n            });\n\n            const user: any = users[0];\n\n            if (user.password) {\n\n              if (currentClientId.toString() === client._id.toString()) {\n  \n                const authing = await new Authing({\n                  clientId: currentClientId,\n                  secret: client.secret,\n                });\n\n                const loginOpt = {\n                  username: user.username,\n                  password: _req.credentials,\n                };\n          \n                await authing.login(loginOpt);\n              }\n\n            }\n\n          } catch (error) {\n            return next(new ldap.InvalidCredentialsError(error));\n          }\n        }else {\n          if (\n            !(\n              currentClientId.toString() === client._id.toString() &&\n              _req.credentials.toString() === client.secret.toString()\n            )\n          ) {\n            return next(new ldap.InvalidCredentialsError());\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      };\n\n      const pre: any = [authorize, loadCurrentClientId];\n\n      server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n        const filterKey: any = req.filter.attribute;\n        const filterValue: any = req.filter.value || '*';\n\n        // const queryDN = req.dn.toString();\n\n        const filterKeyMapping: any = {\n          cn: 'username',\n          gid: '_id',\n          uid: '_id',\n        };\n\n        let queryOptions: any = {\n          registerInClient: ObjectId(req.currentClientId),\n        };\n\n        let users: any;\n        req.users = {};\n\n        if (filterKeyMapping[filterKey]) {\n          const key: any = filterKeyMapping[filterKey];\n          queryOptions[key] =\n            key === '_id' ? ObjectId(filterValue) : filterValue;\n          users = await findUsers(queryOptions);\n\n          const currentUser: any = users[0];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          res.send({\n            dn,\n            attributes: currentUser,\n          });\n        } else {\n          users = await findUsers(queryOptions);\n          for (var i = 0; i < users.length; i++) {\n            const currentUser: any = users[i];\n            const cn: any = currentUser.username;\n            const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n              req.currentClientId\n            }, dc=authing, dc=cn`;\n            currentUser['cn'] = cn;\n            currentUser['gid'] = currentUser._id;\n            currentUser['uid'] = currentUser._id;\n            currentUser['objectclass'] = 'users';\n            delete currentUser['__v'];\n            delete currentUser['isDeleted'];\n            delete currentUser['salt'];\n\n            req.users[dn] = {\n              dn,\n              attributes: currentUser,\n            };\n\n            Object.keys(req.users).forEach(function(key) {\n              if (req.filter.matches(req.users[key].attributes)) {\n                res.send(req.users[key]);\n              }\n            });\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.ConstraintViolationError('cn required'));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (users && users.length > 0) {\n          return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n        }\n\n        try {\n          const authing = await new Authing({\n            clientId: req.currentClientId,\n            secret: client.secret,\n          });\n\n          await authing.register({\n            username: cn.value,\n            nickname: cn.value,\n            unionid: `ldap|${cn.value}`,\n            registerMethod: `ldap:sso::from-ldapadd`,\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        try {\n          await removeUser({\n            registerInClient: ObjectId(req.currentClientId),\n            username: cn.value,\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n        const cn: any = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        if (!req.changes.length)\n          return next(new ldap.ProtocolError('changes required'));\n\n        const users: any = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        const user: any = users[0];\n\n        let mod: any, authing: any;\n\n        for (var i = 0; i < req.changes.length; i++) {\n          mod = req.changes[i].modification;\n          switch (req.changes[i].operation) {\n            case 'replace':\n              const typeMapping: any = {\n                userpassword: 'password',\n                mail: 'email',\n                cn: ['username'],\n              };\n\n              const notAllowedTypes = ['gid', 'uid', '_id'];\n\n              if (notAllowedTypes.indexOf(mod.type) > -1) {\n                return next(\n                  new ldap.UnwillingToPerformError(\n                    `${mod.type} is not allowed to modify`\n                  )\n                );\n              }\n\n              let fieldModified: any = mod.type;\n\n              if (typeMapping[mod.type]) {\n                fieldModified = typeMapping[mod.type];\n              }\n\n              try {\n                authing =\n                  authing ||\n                  (await new Authing({\n                    clientId: req.currentClientId,\n                    secret: client.secret,\n                  }));\n\n                if (\n                  fieldModified instanceof String ||\n                  typeof fieldModified === 'string'\n                ) {\n                  let query: any = {\n                    _id: user._id,\n                  };\n                  const field: any = fieldModified;\n                  query[field] = mod.vals[0];\n                  await authing.update(query);\n                } else {\n                  let query: any = {\n                    _id: users[0]._id,\n                  };\n                  for (let i = 0; i < fieldModified.length; i++) {\n                    query[fieldModified[i]] = mod.vals[0];\n                  }\n                  await authing.update(query);\n                }\n              } catch (error) {\n                return next(new ldap.UnavailableError(error.toString()));\n              }\n              break;\n            case 'add':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n            case 'delete':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n          }\n        }\n\n        res.end();\n        return next();\n      });\n    }\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","callback","clients","isDeleted","findClients","loadCurrentClientId","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","bindDN","_id","SUFFIX","bind","async","_req","res","toString","dnString","indexOf","uid","users","registerInClient","authing","clientId","secret","loginOpt","username","credentials","login","error","InvalidCredentialsError","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","query","_resolve","_reject","updateOne","$set","then","catch","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","listen"],"mappings":"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"}