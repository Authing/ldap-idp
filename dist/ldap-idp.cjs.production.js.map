{"version":3,"file":"ldap-idp.cjs.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n  console.log('Connected successfully to server');\n  const db = client.db(ldapdb.dbname);\n\n  createLDAPServer(db);\n\n  // const insertDocuments = function(db, callback) {\n  //   // Get the documents collection\n  //   const collection = db.collection('documents');\n  //   // Insert some documents\n  //   collection.insertMany([\n  //     {a : 1}, {a : 2}, {a : 3}\n  //   ], function(err, result) {\n  //     assert.equal(err, null);\n  //     assert.equal(3, result.result.n);\n  //     assert.equal(3, result.ops.length);\n  //     console.log(\"Inserted 3 documents into the collection\");\n  //     callback(result);\n  //   });\n  // }\n\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(callback: any, opts: any) {\n    const collection = db.collection('users');\n    opts['isDeleted'] = false;\n    collection.find(opts).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients.find({\n      isDeleted: false,\n    }).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  }\n\n  findClients((clients: any) => {\n  \n    const loadAuthingUsers = (req: any, _res: any, next: any) => {\n      let currentClientId: string = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for(let key in rdn.attrs) {\n          if (key === 'o') {\n            currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n\n      findUsers((users: any) => {\n        req.users = {};  \n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          req.users[currentUser._id] = {\n            dn: `cn=${currentUser.username ||\n              currentUser.email ||\n              currentUser.phone ||\n              currentUser.unionid},uid=${\n              currentUser._id\n            }, ou=users, o=${currentClientId}, dc=authing, dc=cn`,\n            attributes: {\n              cn:\n                currentUser.username ||\n                currentUser.email ||\n                currentUser.phone ||\n                currentUser.unionid,\n              uid: currentUser._id,\n              gid: currentUser._id,\n              unionid: currentUser.unionid,\n              email: currentUser.email,\n              phone: currentUser.phone,\n              nickname: currentUser.nickname,\n              username: currentUser.username,\n              photo: currentUser.photo,\n              emailVerified: currentUser.emailVerified,\n              oauth: currentUser.oauth,\n              token: currentUser.token,\n              registerInClient: currentUser.registerInClient,\n              loginsCount: currentUser.loginsCount,\n              lastIP: currentUser.lastIP,\n              company: currentUser.company,\n              objectclass: 'authingUser',\n            },\n          };\n        }\n  \n        return next();\n      }, {\n        registerInClient: ObjectId(currentClientId)\n      });\n    }    \n\n    for(let i = 0; i < clients.length; i++) {\n      const client = clients[i];\n      const SUFFIX: string = `o=${client._id}, ou=users, dc=authing, dc=cn`;\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D cn=root -LLL -b \"o=authingId,ou=users,dc=authing,dc=cn\" cn=root\n      */\n    \n      server.bind(bindDN, function(_req: any, res: any, next: any) {\n        // if (req.dn.toString() !== 'cn=root')\n        //   return next(new ldap.InvalidCredentialsError());\n    \n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      }\n    \n      const pre: any = [authorize, loadAuthingUsers];\n    \n      server.search(SUFFIX, pre, function(req: any, res: any, next: any) {\n        Object.keys(req.users).forEach(function(k) {\n          if (req.filter.matches(req.users[k].attributes)) res.send(req.users[k]);\n        });\n    \n        res.end();\n        return next();\n      });\n    }\n  \n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","callback","clients","collection","find","isDeleted","toArray","err","docs","findClients","loadAuthingUsers","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","opts","findUsers","users","currentUser","_id","username","email","phone","unionid","attributes","cn","uid","gid","nickname","photo","emailVerified","oauth","token","registerInClient","loginsCount","lastIP","company","objectclass","SUFFIX","bindDN","bind","_req","res","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","Object","keys","forEach","k","filter","matches","send","listen"],"mappings":"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"}