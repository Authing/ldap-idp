{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n  console.log('Connected successfully to server');\n  const db = client.db(ldapdb.dbname);\n\n  createLDAPServer(db);\n\n  // const insertDocuments = function(db, callback) {\n  //   // Get the documents collection\n  //   const collection = db.collection('documents');\n  //   // Insert some documents\n  //   collection.insertMany([\n  //     {a : 1}, {a : 2}, {a : 3}\n  //   ], function(err, result) {\n  //     assert.equal(err, null);\n  //     assert.equal(3, result.result.n);\n  //     assert.equal(3, result.ops.length);\n  //     console.log(\"Inserted 3 documents into the collection\");\n  //     callback(result);\n  //   });\n  // }\n\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(callback: any) {\n    const collection = db.collection('users');\n    collection.find({}).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  };  \n\n  function authorize(req: any, _res: any, next: any) {\n    if (!req.connection.ldap.bindDN.equals('cn=root'))\n      return next(new ldap.InsufficientAccessRightsError());\n\n    return next();\n  }\n\n  function loadAuthingUsers(req: any, _res: any, next: any) {\n    findUsers((users: any) => {\n      req.users = {};\n\n      for (var i = 0; i < users.length; i++) {\n        const currentUser: any = users[i];\n        req.users[currentUser._id] = {\n          dn: `cn=${currentUser.username ||\n            currentUser.email ||\n            currentUser.phone ||\n            currentUser.unionid},uid=${\n            currentUser._id\n          }, ou=users, o=authingId, dc=authing, dc=cn`,\n          attributes: {\n            cn:\n              currentUser.username ||\n              currentUser.email ||\n              currentUser.phone ||\n              currentUser.unionid,\n            uid: currentUser._id,\n            gid: currentUser._id,\n            username: currentUser.username,\n            objectclass: 'authingUser',\n          },\n        };\n      }\n\n      return next();\n    });\n  }\n\n  const SUFFIX: string = 'o=authingId, ou=users, dc=authing, dc=cn';\n\n  /*\n    DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n    ldapsearch -H ldap://localhost:1389 -x -D cn=root -LLL -b \"o=authingId,ou=users,dc=authing,dc=cn\" cn=root\n  */\n\n  server.bind('cn=root', function(req: any, res: any, next: any) {\n    console.log(req.dn.rdns);\n    // if (req.dn.toString() !== 'cn=root')\n    //   return next(new ldap.InvalidCredentialsError());\n\n    res.end();\n    return next();\n  });\n\n  const pre: any = [authorize, loadAuthingUsers];\n\n  server.search(SUFFIX, pre, function(req: any, res: any, next: any) {\n    Object.keys(req.users).forEach(function(k) {\n      if (req.filter.matches(req.users[k].attributes)) res.send(req.users[k]);\n    });\n\n    res.end();\n    return next();\n  });\n\n  server.listen(1389, function() {\n    console.log('LDAP server up at: %s', server.url);\n  });\n};\n"],"names":["ldap","require","MongoClient","ldapdb","assert","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","callback","collection","find","toArray","err","docs","bind","req","res","next","dn","rdns","end","pre","_res","connection","bindDN","equals","InsufficientAccessRightsError","users","i","length","currentUser","_id","username","email","phone","unionid","attributes","cn","uid","gid","objectclass","search","Object","keys","forEach","k","filter","matches","send","listen"],"mappings":"AAAA,MAAMA,EAAOC,QAAQ,UAEfC,EAAcD,QAAQ,WAAWC,YACjCC,EAASF,QAAQ,iBAEjBG,EAASH,QAAQ,UAGjBI,EAAM,CACV,aACAF,EAAOG,KAAO,IAAMH,EAAOI,SAAW,IACtCJ,EAAOK,GACP,IACAL,EAAOM,KACP,IACAN,EAAOO,QACPC,KAAK,IAGPT,EAAYU,QAAQP,EAAK,SAASQ,EAAWC,GAC3CV,EAAOW,MAAM,KAAMF,GACnBG,QAAQC,IAAI,0CACNC,EAAKJ,EAAOI,GAAGf,EAAOO,QAE5BS,EAAiBD,KAoBnB,MAAMC,EAAoBD,UAClBE,EAAcpB,EAAKqB,eAEnBC,EAAiB,SAASC,SACxBC,EAAaN,EAAGM,WAAW,SACjCA,EAAWC,KAAK,IAAIC,QAAQ,SAASC,EAAUC,GAC7CxB,EAAOW,MAAMY,EAAK,MAClBJ,EAASK,MAiDbR,EAAOS,KAAK,UAAW,SAASC,EAAUC,EAAUC,UAClDhB,QAAQC,IAAIa,EAAIG,GAAGC,MAInBH,EAAII,MACGH,YAGHI,EAAW,UAtDEN,EAAUO,EAAWL,UACjCF,EAAIQ,WAAWtC,KAAKuC,OAAOC,OAAO,WAGhCR,IAFEA,EAAK,IAAIhC,EAAKyC,yCAKCX,EAAUO,EAAWL,GAC7CV,EAAWoB,IACTZ,EAAIY,MAAQ,OAEP,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,OAC/BE,EAAmBH,EAAMC,GAC/Bb,EAAIY,MAAMG,EAAYC,KAAO,CAC3Bb,SAAUY,EAAYE,UACpBF,EAAYG,OACZH,EAAYI,OACZJ,EAAYK,eACZL,EAAYC,gDAEdK,WAAY,CACVC,GACEP,EAAYE,UACZF,EAAYG,OACZH,EAAYI,OACZJ,EAAYK,QACdG,IAAKR,EAAYC,IACjBQ,IAAKT,EAAYC,IACjBC,SAAUF,EAAYE,SACtBQ,YAAa,uBAKZvB,QAsBXZ,EAAOoC,OAlBgB,2CAkBDpB,EAAK,SAASN,EAAUC,EAAUC,UACtDyB,OAAOC,KAAK5B,EAAIY,OAAOiB,QAAQ,SAASC,GAClC9B,EAAI+B,OAAOC,QAAQhC,EAAIY,MAAMkB,GAAGT,aAAapB,EAAIgC,KAAKjC,EAAIY,MAAMkB,MAGtE7B,EAAII,MACGH,MAGTZ,EAAO4C,OAAO,KAAM,WAClBhD,QAAQC,IAAI,wBAAyBG,EAAOf"}