{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  findClients((clients: any) => {\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i];\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n      const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n      */\n\n      server.bind(bindDN, async function(_req: any, res: any, next: any) {\n        const o: any = _req.dn.rdns[1].attrs;\n        let currentClientId: any;\n        if (o['o']) {\n          currentClientId = o.o.value;\n        }\n\n        if (\n          !(\n            currentClientId.toString() === client._id.toString() &&\n            _req.credentials.toString() === client.secret.toString()\n          )\n        )\n          return next(new ldap.InvalidCredentialsError());\n\n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      };\n\n      const pre: any = [authorize, loadCurrentClientId];\n\n      server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n        const filterKey: any = req.filter.attribute;\n        const filterValue: any = req.filter.value || '*';\n\n        // const queryDN = req.dn.toString();\n\n        const filterKeyMapping: any = {\n          cn: 'username',\n          gid: '_id',\n          uid: '_id',\n        };\n\n        let queryOptions: any = {\n          registerInClient: ObjectId(req.currentClientId),\n        };\n\n        let users: any;\n        req.users = {};\n\n        if (filterKeyMapping[filterKey]) {\n          const key: any = filterKeyMapping[filterKey];\n          queryOptions[key] =\n            key === '_id' ? ObjectId(filterValue) : filterValue;\n          users = await findUsers(queryOptions);\n\n          const currentUser: any = users[0];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          res.send({\n            dn,\n            attributes: currentUser,\n          });\n        } else {\n          users = await findUsers(queryOptions);\n          for (var i = 0; i < users.length; i++) {\n            const currentUser: any = users[i];\n            const cn: any = currentUser.username;\n            const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n              req.currentClientId\n            }, dc=authing, dc=cn`;\n            currentUser['cn'] = cn;\n            currentUser['gid'] = currentUser._id;\n            currentUser['uid'] = currentUser._id;\n            currentUser['objectclass'] = 'users';\n            delete currentUser['__v'];\n            delete currentUser['isDeleted'];\n            delete currentUser['salt'];\n\n            req.users[dn] = {\n              dn,\n              attributes: currentUser,\n            };\n\n            Object.keys(req.users).forEach(function(key) {\n              if (req.filter.matches(req.users[key].attributes)) {\n                res.send(req.users[key]);\n              }\n            });\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.ConstraintViolationError('cn required'));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (users && users.length > 0) {\n          return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n        }\n\n        try {\n          const authing = await new Authing({\n            clientId: req.currentClientId,\n            secret: client.secret,\n          });\n\n          await authing.register({\n            username: cn.value,\n            nickname: cn.value,\n            unionid: `ldap|${cn.value}`,\n            registerMethod: 'sso:ldap-add',\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        try {\n          await removeUser({\n            registerInClient: ObjectId(req.currentClientId),\n            username: cn.value,\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n        const cn: any = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        if (!req.changes.length)\n          return next(new ldap.ProtocolError('changes required'));\n\n        const users: any = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        const user: any = users[0];\n\n        let mod: any, authing: any;\n\n        for (var i = 0; i < req.changes.length; i++) {\n          mod = req.changes[i].modification;\n          switch (req.changes[i].operation) {\n            case 'replace':\n              const typeMapping: any = {\n                userpassword: 'password',\n                mail: 'email',\n                cn: ['username'],\n              };\n\n              const notAllowedTypes = ['gid', 'uid', '_id'];\n\n              if (notAllowedTypes.indexOf(mod.type) > -1) {\n                return next(\n                  new ldap.UnwillingToPerformError(\n                    `${mod.type} is not allowed to modify`\n                  )\n                );\n              }\n\n              let fieldModified: any = mod.type;\n\n              if (typeMapping[mod.type]) {\n                fieldModified = typeMapping[mod.type];\n              }\n\n              try {\n                authing =\n                  authing ||\n                  (await new Authing({\n                    clientId: req.currentClientId,\n                    secret: client.secret,\n                  }));\n\n                if (\n                  fieldModified instanceof String ||\n                  typeof fieldModified === 'string'\n                ) {\n                  let query: any = {\n                    _id: user._id,\n                  };\n                  const field: any = fieldModified;\n                  query[field] = mod.vals[0];\n                  await authing.update(query);\n                } else {\n                  let query: any = {\n                    _id: users[0]._id,\n                  };\n                  for (let i = 0; i < fieldModified.length; i++) {\n                    query[fieldModified[i]] = mod.vals[0];\n                  }\n                  await authing.update(query);\n                }\n              } catch (error) {\n                return next(new ldap.UnavailableError(error.toString()));\n              }\n              break;\n            case 'add':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n            case 'delete':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n          }\n        }\n\n        res.end();\n        return next();\n      });\n    }\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","callback","clients","isDeleted","findClients","loadCurrentClientId","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","bindDN","_id","SUFFIX","bind","async","_req","res","toString","credentials","secret","InvalidCredentialsError","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","uid","users","queryOptions","registerInClient","currentUser","username","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","EntryAlreadyExistsError","authing","clientId","register","nickname","unionid","registerMethod","error","UnavailableError","del","NoSuchObjectError","query","_resolve","_reject","updateOne","$set","then","catch","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","indexOf","type","UnwillingToPerformError","fieldModified","String","field","vals","update","listen"],"mappings":"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"}