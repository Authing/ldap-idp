{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = `mongodb://${ldapdb.user}:${ldapdb.password}@${\n  ldapdb.replicaSet.addr\n}/${ldapdb.dbname}?readPreference=secondaryPreferred&replicaSet=${\n  ldapdb.replicaSet.name\n}`;\n\nprocess.on('unhandledRejection', err => {\n  console.log('全局reject');\n  console.log(err);\n});\n\n// uncaughtException 避免程序崩溃\nprocess.on('uncaughtException', function(err) {\n  console.log(err);\n});\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userpools');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  const initLdapRoutes: any = function(client: any) {\n    let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n    const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n    /*\n      DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n      ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n    */\n\n    server.bind(bindDN, async function(_req: any, res: any, next: any) {\n      const o: any = _req.dn.rdns[1].attrs;\n      let currentClientId: any = '';\n      if (o['o']) {\n        currentClientId = o.o.value;\n      } else {\n        const rdns: any = _req.dn.rdns;\n        for (let i = 0; i < rdns.length; i++) {\n          const rdn = rdns[i];\n          for (let key in rdn.attrs) {\n            if (key === 'o') {\n              currentClientId = rdn.attrs.o.value;\n            }\n          }\n        }\n      }\n\n      console.log(_req.dn.rdns.toString());\n\n      const dnString = _req.dn.rdns.toString();\n\n      /*\n        需要分两种类型进行验证\n        1. 只用 client 进行查询，使用 secret 进行验证\n        2. 对单个用户进行查询，使用用户真实密码进行验证\n      */\n\n      if (dnString.indexOf('uid=') > -1) {\n        try {\n          const rdns: any = _req.dn.rdns;\n          let uid: string = '';\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'uid') {\n                uid = rdn.attrs.uid.value;\n              }\n            }\n          }\n\n          const users: any = await findUsers({\n            registerInClient: ObjectId(currentClientId),\n            _id: ObjectId(uid),\n          });\n\n          const user: any = users[0];\n\n          if (user.password) {\n            if (currentClientId.toString() === client._id.toString()) {\n              const authing = await new Authing({\n                clientId: currentClientId,\n                secret: client.secret,\n              });\n\n              const loginOpt = {\n                username: user.username,\n                password: _req.credentials,\n              };\n              await authing.login(loginOpt);\n            }\n          }\n        } catch (error) {\n          return next(new ldap.InvalidCredentialsError(JSON.stringify(error)));\n        }\n      } else {\n        if (\n          !(\n            currentClientId.toString() === client._id.toString() &&\n            _req.credentials.toString() === client.secret.toString()\n          )\n        ) {\n          return next(new ldap.InvalidCredentialsError());\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    const authorize = (_req: any, _res: any, next: any) => {\n      if (!_req.connection.ldap.bindDN.equals(bindDN))\n        return next(new ldap.InsufficientAccessRightsError());\n      return next();\n    };\n\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    const pre: any = [authorize, loadCurrentClientId];\n\n    server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n      const filterKey: any = req.filter.attribute;\n      const filterValue: any = req.filter.value || '*';\n\n      // const queryDN = req.dn.toString();\n\n      const filterKeyMapping: any = {\n        cn: 'username',\n        gid: '_id',\n        uid: '_id',\n      };\n\n      let queryOptions: any = {\n        registerInClient: ObjectId(req.currentClientId),\n      };\n\n      let users: any;\n      req.users = {};\n\n      if (filterKeyMapping[filterKey]) {\n        const key: any = filterKeyMapping[filterKey];\n        queryOptions[key] = key === '_id' ? ObjectId(filterValue) : filterValue;\n        users = await findUsers(queryOptions);\n\n        const currentUser: any = users[0];\n        const cn: any = currentUser.username;\n        const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n          req.currentClientId\n        }, dc=authing, dc=cn`;\n        currentUser['cn'] = cn;\n        currentUser['gid'] = currentUser._id;\n        currentUser['uid'] = currentUser._id;\n        currentUser['objectclass'] = 'users';\n\n        delete currentUser['__v'];\n        delete currentUser['isDeleted'];\n        delete currentUser['salt'];\n\n        res.send({\n          dn,\n          attributes: currentUser,\n        });\n      } else {\n        users = await findUsers(queryOptions);\n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          req.users[dn] = {\n            dn,\n            attributes: currentUser,\n          };\n\n          Object.keys(req.users).forEach(function(key) {\n            if (req.filter.matches(req.users[key].attributes)) {\n              res.send(req.users[key]);\n            }\n          });\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.ConstraintViolationError('cn required'));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (users && users.length > 0) {\n        return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n      }\n\n      try {\n        const authing = await new Authing({\n          clientId: req.currentClientId,\n          secret: client.secret,\n        });\n\n        await authing.register({\n          username: cn.value,\n          nickname: cn.value,\n          unionid: `ldap|${cn.value}`,\n          registerMethod: `ldap:sso::from-ldapadd`,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      try {\n        await removeUser({\n          registerInClient: ObjectId(req.currentClientId),\n          username: cn.value,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n      const cn: any = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      if (!req.changes.length)\n        return next(new ldap.ProtocolError('changes required'));\n\n      const users: any = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      const user: any = users[0];\n\n      let mod: any, authing: any;\n\n      for (var i = 0; i < req.changes.length; i++) {\n        mod = req.changes[i].modification;\n        switch (req.changes[i].operation) {\n          case 'replace':\n            const typeMapping: any = {\n              userpassword: 'password',\n              mail: 'email',\n              cn: ['username'],\n            };\n            // 不允许修改密码，因为无法提供 oldPassword，日后可以改善下\n            const notAllowedTypes = ['gid', 'uid', '_id', 'userpassword'];\n            if (notAllowedTypes.indexOf(mod.type) > -1) {\n              return next(\n                new ldap.UnwillingToPerformError(\n                  `${mod.type} is not allowed to modify`\n                )\n              );\n            }\n\n            let fieldModified: any = mod.type;\n\n            if (typeMapping[mod.type]) {\n              fieldModified = typeMapping[mod.type];\n            }\n\n            try {\n              authing =\n                authing ||\n                (await new Authing({\n                  clientId: req.currentClientId,\n                  secret: client.secret,\n                }));\n\n              if (\n                fieldModified instanceof String ||\n                typeof fieldModified === 'string'\n              ) {\n                let query: any = {\n                  _id: user._id,\n                };\n                const field: any = fieldModified;\n                query[field] = mod.vals[0];\n                await authing.update(query);\n              } else {\n                let query: any = {\n                  _id: users[0]._id,\n                };\n                for (let i = 0; i < fieldModified.length; i++) {\n                  query[fieldModified[i]] = mod.vals[0];\n                }\n                await authing.update(query);\n              }\n            } catch (error) {\n              return next(new ldap.UnavailableError(JSON.stringify(error)));\n            }\n            break;\n          case 'add':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n          case 'delete':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n        }\n      }\n\n      res.end();\n      return next();\n    });\n  };\n\n  findClients((clients: any) => {\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n      initLdapRoutes(client);\n    }\n\n    const collection = db.collection('userpools');\n    const changeStream = collection.watch();\n    changeStream.on('change', (oplog: any) => {\n      // process next document\n      const operationType = oplog.operationType;\n      if (operationType === 'insert') {\n        const client = oplog.fullDocument;\n        console.log('add client to ldap', client);\n        initLdapRoutes(client);\n      }\n    });\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","replicaSet","addr","dbname","name","process","on","err","console","log","connect","_err","client","equal","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","docs","initLdapRoutes","bindDN","_id","SUFFIX","bind","async","_req","res","next","o","dn","rdns","attrs","currentClientId","value","i","length","rdn","key","toString","dnString","indexOf","uid","users","registerInClient","authing","clientId","secret","loginOpt","username","credentials","login","error","InvalidCredentialsError","JSON","stringify","end","pre","_res","connection","equals","InsufficientAccessRightsError","req","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","isDeleted","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","query","_resolve","_reject","updateOne","$set","then","catch","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","callback","clients","findClients","changeStream","watch","oplog","operationType","fullDocument","listen"],"mappings":"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"}