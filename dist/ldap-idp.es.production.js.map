{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n  console.log('Connected successfully to server');\n  const db = client.db(ldapdb.dbname);\n\n  createLDAPServer();\n\n  // const insertDocuments = function(db, callback) {\n  //   // Get the documents collection\n  //   const collection = db.collection('documents');\n  //   // Insert some documents\n  //   collection.insertMany([\n  //     {a : 1}, {a : 2}, {a : 3}\n  //   ], function(err, result) {\n  //     assert.equal(err, null);\n  //     assert.equal(3, result.result.n);\n  //     assert.equal(3, result.ops.length);\n  //     console.log(\"Inserted 3 documents into the collection\");\n  //     callback(result);\n  //   });\n  // }\n\n  const findDocuments = function(db: any, callback: any) {\n    const collection = db.collection('users');\n    collection.find({}).toArray(function(err: any, docs: any) {\n      assert.equal(err, null);\n      callback(docs);\n    });\n  };\n\n  findDocuments(db, (users: any) => {\n    console.log(users);\n  });\n\n  client.close();\n});\n\nconst createLDAPServer = () => {\n  const server: any = ldap.createServer();\n\n  function authorize(req: any, _res: any, next: any) {\n    if (!req.connection.ldap.bindDN.equals('cn=root'))\n      return next(new ldap.InsufficientAccessRightsError());\n  \n    return next();\n  }\n  \n  function loadPasswdFile(req: any, _res: any, next: any) {\n    fs.readFile('/etc/passwd', 'utf8', function(err: any, data: any) {\n      if (err)\n        return next(new ldap.OperationsError(err.message));\n  \n      req.users = {};\n  \n      var lines = data.split('\\n');\n      for (var i = 0; i < lines.length; i++) {\n        if (!lines[i] || /^#/.test(lines[i]))\n          continue;\n  \n        var record = lines[i].split(':');\n        if (!record || !record.length)\n          continue;\n  \n        req.users[record[0]] = {\n          dn: `cn=${record[0]},uid=${record[2]}, ou=users, o=authingId, dc=authing, dc=cn`,\n          attributes: {\n            cn: record[0],\n            uid: record[2],\n            gid: record[3],\n            description: record[4],\n            homedirectory: record[5],\n            shell: record[6] || '',\n            objectclass: 'unixUser'\n          }\n        };\n      }\n  \n      return next();\n    });\n  }\n  \n  const SUFFIX: string = 'o=authingId, ou=users, dc=authing, dc=cn';\n  \n  /*\n    DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n    ldapsearch -H ldap://localhost:1389 -x -D cn=root -LLL -b \"o=authingId,ou=users,dc=authing,dc=cn\" cn=root\n  */\n  \n  server.bind('cn=root', function(req: any, res: any, next: any) {\n    console.log(req.dn.rdns);\n    // if (req.dn.toString() !== 'cn=root')\n    //   return next(new ldap.InvalidCredentialsError());\n  \n    res.end();\n    return next();\n  });\n  \n  const pre: any = [authorize, loadPasswdFile];\n  \n  server.search(SUFFIX, pre, function(req: any, res: any, next: any) {\n    Object.keys(req.users).forEach(function(k) {\n      if (req.filter.matches(req.users[k].attributes))\n        res.send(req.users[k]);\n    });\n  \n    res.end();\n    return next();\n  });\n  \n  server.listen(1389, function() {\n    console.log('LDAP server up at: %s', server.url);\n  });\n}"],"names":["ldap","require","fs","MongoClient","ldapdb","assert","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","callback","collection","find","toArray","err","docs","findDocuments","users","close","server","createServer","bind","req","res","next","dn","rdns","end","pre","_res","connection","bindDN","equals","InsufficientAccessRightsError","readFile","data","OperationsError","message","lines","split","i","length","test","record","attributes","cn","uid","gid","description","homedirectory","shell","objectclass","search","Object","keys","forEach","k","filter","matches","send","listen"],"mappings":"AAAA,MAAMA,EAAOC,QAAQ,UACfC,EAAKD,QAAQ,MACbE,EAAcF,QAAQ,WAAWE,YACjCC,EAASH,QAAQ,iBAEjBI,EAASJ,QAAQ,UAGjBK,EAAM,CACV,aACAF,EAAOG,KAAO,IAAMH,EAAOI,SAAW,IACtCJ,EAAOK,GACP,IACAL,EAAOM,KACP,IACAN,EAAOO,QACPC,KAAK,IAGPT,EAAYU,QAAQP,EAAK,SAASQ,EAAWC,GAC3CV,EAAOW,MAAM,KAAMF,GACnBG,QAAQC,IAAI,0CACNC,EAAKJ,EAAOI,GAAGf,EAAOO,QAE5BS,KAiBsB,SAASD,EAASE,SAChCC,EAAaH,EAAGG,WAAW,SACjCA,EAAWC,KAAK,IAAIC,QAAQ,SAASC,EAAUC,GAC7CrB,EAAOW,MAAMS,EAAK,MAClBJ,EAASK,KAIbC,CAAcR,EAAKS,IACjBX,QAAQC,IAAIU,KAGdb,EAAOc,UAGT,MAAMT,EAAmB,WACjBU,EAAc9B,EAAK+B,eAkDzBD,EAAOE,KAAK,UAAW,SAASC,EAAUC,EAAUC,UAClDlB,QAAQC,IAAIe,EAAIG,GAAGC,MAInBH,EAAII,MACGH,YAGHI,EAAW,UAzDEN,EAAUO,EAAWL,UACjCF,EAAIQ,WAAWzC,KAAK0C,OAAOC,OAAO,WAGhCR,IAFEA,EAAK,IAAInC,EAAK4C,yCAKDX,EAAUO,EAAWL,GAC3CjC,EAAG2C,SAAS,cAAe,OAAQ,SAASpB,EAAUqB,MAChDrB,EACF,OAAOU,EAAK,IAAInC,EAAK+C,gBAAgBtB,EAAIuB,UAE3Cf,EAAIL,MAAQ,WAERqB,EAAQH,EAAKI,MAAM,MACdC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,OAC3BF,EAAME,KAAM,KAAKE,KAAKJ,EAAME,SAG7BG,EAASL,EAAME,GAAGD,MAAM,KACvBI,GAAWA,EAAOF,SAGvBnB,EAAIL,MAAM0B,EAAO,IAAM,CACrBlB,SAAUkB,EAAO,UAAUA,EAAO,+CAClCC,WAAY,CACVC,GAAIF,EAAO,GACXG,IAAKH,EAAO,GACZI,IAAKJ,EAAO,GACZK,YAAaL,EAAO,GACpBM,cAAeN,EAAO,GACtBO,MAAOP,EAAO,IAAM,GACpBQ,YAAa,qBAKZ3B,QAsBXL,EAAOiC,OAlBgB,2CAkBDxB,EAAK,SAASN,EAAUC,EAAUC,UACtD6B,OAAOC,KAAKhC,EAAIL,OAAOsC,QAAQ,SAASC,GAClClC,EAAImC,OAAOC,QAAQpC,EAAIL,MAAMuC,GAAGZ,aAClCrB,EAAIoC,KAAKrC,EAAIL,MAAMuC,MAGvBjC,EAAII,MACGH,MAGTL,EAAOyC,OAAO,KAAM,WAClBtD,QAAQC,IAAI,wBAAyBY,EAAOxB"}