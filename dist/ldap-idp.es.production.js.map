{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n  console.log('Connected successfully to server');\n  const db = client.db(ldapdb.dbname);\n\n  createLDAPServer(db);\n\n  // const insertDocuments = function(db, callback) {\n  //   // Get the documents collection\n  //   const collection = db.collection('documents');\n  //   // Insert some documents\n  //   collection.insertMany([\n  //     {a : 1}, {a : 2}, {a : 3}\n  //   ], function(err, result) {\n  //     assert.equal(err, null);\n  //     assert.equal(3, result.result.n);\n  //     assert.equal(3, result.ops.length);\n  //     console.log(\"Inserted 3 documents into the collection\");\n  //     callback(result);\n  //   });\n  // }\n\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve, reject) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        // assert.equal(err, null);\n        if (err) reject(err)\n        // callback(docs);\n        resolve(docs)\n      });  \n    })\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  findClients((clients: any) => {\n    const loadAuthingUsers = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i];\n      const SUFFIX: string = `o=${client._id}, ou=users, dc=authing, dc=cn`;\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D cn=root -LLL -b \"o=authingId,ou=users,dc=authing,dc=cn\" cn=root\n      */\n\n      server.bind(bindDN, function(_req: any, res: any, next: any) {\n        // if (req.dn.toString() !== 'cn=root')\n        //   return next(new ldap.InvalidCredentialsError());\n\n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      };\n\n      const pre: any = [authorize, loadAuthingUsers];\n\n      server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n\n        const filterKey: any = req.filter.attribute;\n        const filterValue: any = req.filter.value;\n\n        const filterKeyMapping: any = {\n          cn: ['username', 'email', 'phone', 'unionid'],\n          gid: ['_id'],\n          uid: ['_id'],\n        }\n\n        let queryOptions: any = {\n          registerInClient: ObjectId(req.currentClientId),\n        }\n\n        if (filterKeyMapping[filterKey]) {\n          const filterMapping: any = filterKeyMapping[filterKey];\n          for(let i = 0; i < filterMapping.length; i++) {\n            const key = filterMapping[i];\n            queryOptions[key] = key === '_id' ? ObjectId(filterValue) : filterValue;\n\n            const users: object[] = await findUsers(queryOptions);\n    \n            if (users && users.length > 0) {\n              const currentUser: any = users[0];\n              const cn = currentUser.username ||\n                currentUser.email ||\n                currentUser.phone ||\n                currentUser.unionid;\n              const dn = `cn=${cn},uid=${\n                currentUser._id\n              }, ou=users, o=${req.currentClientId}, dc=authing, dc=cn`; \n              currentUser['cn'] = cn;\n              currentUser['gid'] = currentUser._id;\n              currentUser['uid'] = currentUser._id;\n    \n              delete currentUser['__v'];\n    \n              res.send({\n                dn,\n                attributes: currentUser,\n              });\n              break;\n            }\n\n            delete queryOptions[key];\n          }\n        }\n\n        res.end();\n        return next();\n      });\n    }\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","callback","clients","isDeleted","findClients","loadAuthingUsers","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","SUFFIX","_id","bindDN","bind","_req","res","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","async","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","uid","queryOptions","registerInClient","filterMapping","users","currentUser","username","email","phone","unionid","send","attributes","listen"],"mappings":"AAAA,MAAMA,EAAOC,QAAQ,UAGfC,EAAcD,QAAQ,WAAWC,YACjCC,EAAWF,QAAQ,WAAWE,SAC9BC,EAASH,QAAQ,iBAEjBI,EAASJ,QAAQ,UAGjBK,EAAM,CACV,aACAF,EAAOG,KAAO,IAAMH,EAAOI,SAAW,IACtCJ,EAAOK,GACP,IACAL,EAAOM,KACP,IACAN,EAAOO,QACPC,KAAK,IAGPV,EAAYW,QAAQP,EAAK,SAASQ,EAAWC,GAC3CV,EAAOW,MAAM,KAAMF,GACnBG,QAAQC,IAAI,0CACNC,EAAKJ,EAAOI,GAAGf,EAAOO,QAE5BS,EAAiBD,KAoBnB,MAAMC,EAAoBD,UAClBE,EAAcrB,EAAKsB,eAEnBC,EAAiB,SAASC,UACvB,IAAIC,QAAQ,CAACC,EAASC,WACrBC,EAAaT,EAAGS,WAAW,SACjCJ,EAAI,WAAgB,EACpBI,EAAWC,KAAKL,GAAMM,QAAQ,SAASC,EAAUC,GAE3CD,GAAKJ,EAAOI,GAEhBL,EAAQM,SAKW,SAASC,SAC1BC,EAAUf,EAAGS,WAAW,eAC9BM,EACGL,KAAK,CACJM,WAAW,IAEZL,QAAQ,SAASC,EAAUC,GAC1B3B,EAAOW,MAAMe,EAAK,MAClBE,EAASD,KAIfI,CAAaF,UACLG,EAAmB,CAACC,EAAUC,EAAWC,KAC7CF,EAAIG,gBAAkB,SAChBC,EAAYJ,EAAIK,GAAGD,SACpB,IAAIE,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,OAC9BE,EAAMJ,EAAKE,OACZ,IAAIG,KAAOD,EAAIE,MACN,MAARD,IACFT,EAAIG,gBAAkBK,EAAIE,MAAMC,EAAEC,cAIjCV,SAGJ,IAAII,EAAI,EAAGA,EAAIV,EAAQW,OAAQD,IAAK,OACjC7B,EAASmB,EAAQU,GACjBO,OAAsBpC,EAAOqC,uCAE/BC,gBAA+BtC,EAAOqC,uBAO1C/B,EAAOiC,KAAKD,EAAQ,SAASE,EAAWC,EAAUhB,UAIhDgB,EAAIC,MACGjB,YAGHkB,EAAY,CAACH,EAAWhB,EAAWC,IAClCe,EAAKI,WAAW3D,KAAKqD,OAAOO,OAAOP,GAEjCb,IADEA,EAAK,IAAIxC,EAAK6D,+BAInBC,EAAW,CAACJ,EAAWrB,GAE7BhB,EAAO0C,OAAOZ,EAAQW,EAAKE,eAAe1B,EAAUkB,EAAUhB,SAEtDyB,EAAiB3B,EAAI4B,OAAOC,UAC5BC,EAAmB9B,EAAI4B,OAAOhB,MAE9BmB,EAAwB,CAC5BC,GAAI,CAAC,WAAY,QAAS,QAAS,WACnCC,IAAK,CAAC,OACNC,IAAK,CAAC,YAGJC,EAAoB,CACtBC,iBAAkBvE,EAASmC,EAAIG,qBAG7B4B,EAAiBJ,GAAY,OACzBU,EAAqBN,EAAiBJ,OACxC,IAAIrB,EAAI,EAAGA,EAAI+B,EAAc9B,OAAQD,IAAK,OACtCG,EAAM4B,EAAc/B,GAC1B6B,EAAa1B,GAAe,QAARA,EAAgB5C,EAASiE,GAAeA,QAEtDQ,QAAwBrD,EAAUkD,MAEpCG,GAASA,EAAM/B,OAAS,EAAG,OACvBgC,EAAmBD,EAAM,GACzBN,EAAKO,EAAYC,UACrBD,EAAYE,OACZF,EAAYG,OACZH,EAAYI,QACRtC,QAAW2B,SACfO,EAAYzB,oBACGd,EAAIG,qCACrBoC,EAAW,GAASP,EACpBO,EAAW,IAAUA,EAAYzB,IACjCyB,EAAW,IAAUA,EAAYzB,WAE1ByB,EAAW,IAElBrB,EAAI0B,KAAK,CACPvC,GAAAA,EACAwC,WAAYN,iBAKTJ,EAAa1B,WAIxBS,EAAIC,MACGjB,MAIXnB,EAAO+D,OAAO,KAAM,WAClBnE,QAAQC,IAAI,wBAAyBG,EAAOf"}