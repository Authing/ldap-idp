{"version":3,"file":"ldap-idp.es.production.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  findClients((clients: any) => {\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i];\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n      const SUFFIX: string = `o=${client._id}, ou=users, dc=authing, dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"o=59f86b4832eb28071bdd9214,ou=users,dc=authing,dc=cn\" cn=18000179176\n      */\n\n      server.bind(bindDN, function(_req: any, res: any, next: any) {\n        // if (req.dn.toString() !== 'cn=root')\n        //   return next(new ldap.InvalidCredentialsError());\n\n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      };\n\n      const pre: any = [authorize, loadCurrentClientId];\n\n      server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -LLL -b \"o=5c344f102e450b000170190a,ou=users,dc=authing,dc=cn\" cn=ldap-tester\n\n        const filterKey: any = req.filter.attribute;\n        const filterValue: any = req.filter.value;\n\n        const filterKeyMapping: any = {\n          cn: ['username', 'email', 'phone', 'unionid'],\n          gid: ['_id'],\n          uid: ['_id'],\n        };\n\n        let queryOptions: any = {\n          registerInClient: ObjectId(req.currentClientId),\n        };\n\n        if (filterKeyMapping[filterKey]) {\n          const filterMapping: any = filterKeyMapping[filterKey];\n          for (let i = 0; i < filterMapping.length; i++) {\n            const key: string = filterMapping[i];\n            queryOptions[key] =\n              key === '_id' ? ObjectId(filterValue) : filterValue;\n\n            const users: object[] = await findUsers(queryOptions);\n\n            if (users && users.length > 0) {\n              const currentUser: any = users[0];\n              const cn: any =\n                currentUser.username ||\n                currentUser.email ||\n                currentUser.phone ||\n                currentUser.unionid;\n              const dn: string = `cn=${cn},uid=${\n                currentUser._id\n              }, ou=users, o=${req.currentClientId}, dc=authing, dc=cn`;\n              currentUser['cn'] = cn;\n              currentUser['gid'] = currentUser._id;\n              currentUser['uid'] = currentUser._id;\n\n              delete currentUser['__v'];\n              delete currentUser['isDeleted'];\n              delete currentUser['salt'];\n\n              res.send({\n                dn,\n                attributes: currentUser,\n              });\n              break;\n            }\n\n            delete queryOptions[key];\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -f ./user.ldif\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.ConstraintViolationError('cn required'));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          unionid: cn.value\n        });\n\n        if (users && users.length > 0) {\n          return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n        }\n\n        try {\n          const authing = await new Authing({\n            clientId: req.currentClientId,\n            secret: '03bb8b2fca823137c7dec63fd0029fc2'\n          });\n  \n          await authing.register({\n            username: cn.value,\n            nickname: cn.value,\n            unionid: cn.value,\n            registerMethod: 'sso:ldap-add',\n          });\n        } catch(error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" \"o=5c344f102e450b000170190a,ou=users,dc=authing,dc=cn\"\n        console.log(req.dn.rdns[0].cn);\n        if (!req.dn.rdns[0].cn) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        // const user = await findUsers({\n\n        // });\n\n        // !req.users[req.dn.rdns[0].cn]\n\n        // return next(new ldap.OperationsError(msg));\n\n        res.end();\n        return next();\n      });\n    }\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","callback","clients","isDeleted","findClients","loadCurrentClientId","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","bindDN","_id","SUFFIX","bind","_req","res","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","async","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","uid","queryOptions","registerInClient","filterMapping","users","currentUser","username","email","phone","unionid","send","attributes","add","ConstraintViolationError","EntryAlreadyExistsError","toString","authing","clientId","secret","register","nickname","registerMethod","error","UnavailableError","del","NoSuchObjectError","listen"],"mappings":"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"}