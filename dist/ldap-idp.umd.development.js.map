{"version":3,"file":"ldap-idp.umd.development.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = `mongodb://${ldapdb.user}:${ldapdb.password}@${\n  ldapdb.replicaSet.addr\n}/${ldapdb.dbname}?readPreference=secondaryPreferred&replicaSet=${\n  ldapdb.replicaSet.name\n}`;\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  const initLdapRoutes: any = function(client: any) {\n    let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n    const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n    /*\n      DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n      ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n    */\n\n    server.bind(bindDN, async function(_req: any, res: any, next: any) {\n      const o: any = _req.dn.rdns[1].attrs;\n      let currentClientId: any = '';\n      if (o['o']) {\n        currentClientId = o.o.value;\n      } else {\n        const rdns: any = _req.dn.rdns;\n        for (let i = 0; i < rdns.length; i++) {\n          const rdn = rdns[i];\n          for (let key in rdn.attrs) {\n            if (key === 'o') {\n              currentClientId = rdn.attrs.o.value;\n            }\n          }\n        }\n      }\n\n      console.log(_req.dn.rdns.toString());\n\n      const dnString = _req.dn.rdns.toString();\n\n      /*\n        需要分两种类型进行验证\n        1. 只用 client 进行查询，使用 secret 进行验证\n        2. 对单个用户进行查询，使用用户真实密码进行验证\n      */\n\n      if (dnString.indexOf('uid=') > -1) {\n        try {\n          const rdns: any = _req.dn.rdns;\n          let uid: string = '';\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'uid') {\n                uid = rdn.attrs.uid.value;\n              }\n            }\n          }\n\n          const users: any = await findUsers({\n            registerInClient: ObjectId(currentClientId),\n            _id: ObjectId(uid),\n          });\n\n          const user: any = users[0];\n\n          if (user.password) {\n            if (currentClientId.toString() === client._id.toString()) {\n              const authing = await new Authing({\n                clientId: currentClientId,\n                secret: client.secret,\n              });\n\n              const loginOpt = {\n                username: user.username,\n                password: _req.credentials,\n              };\n              await authing.login(loginOpt);\n            }\n          }\n        } catch (error) {\n          return next(new ldap.InvalidCredentialsError(JSON.stringify(error)));\n        }\n      } else {\n        if (\n          !(\n            currentClientId.toString() === client._id.toString() &&\n            _req.credentials.toString() === client.secret.toString()\n          )\n        ) {\n          return next(new ldap.InvalidCredentialsError());\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    const authorize = (_req: any, _res: any, next: any) => {\n      if (!_req.connection.ldap.bindDN.equals(bindDN))\n        return next(new ldap.InsufficientAccessRightsError());\n      return next();\n    };\n\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    const pre: any = [authorize, loadCurrentClientId];\n\n    server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n      const filterKey: any = req.filter.attribute;\n      const filterValue: any = req.filter.value || '*';\n\n      // const queryDN = req.dn.toString();\n\n      const filterKeyMapping: any = {\n        cn: 'username',\n        gid: '_id',\n        uid: '_id',\n      };\n\n      let queryOptions: any = {\n        registerInClient: ObjectId(req.currentClientId),\n      };\n\n      let users: any;\n      req.users = {};\n\n      if (filterKeyMapping[filterKey]) {\n        const key: any = filterKeyMapping[filterKey];\n        queryOptions[key] = key === '_id' ? ObjectId(filterValue) : filterValue;\n        users = await findUsers(queryOptions);\n\n        const currentUser: any = users[0];\n        const cn: any = currentUser.username;\n        const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n          req.currentClientId\n        }, dc=authing, dc=cn`;\n        currentUser['cn'] = cn;\n        currentUser['gid'] = currentUser._id;\n        currentUser['uid'] = currentUser._id;\n        currentUser['objectclass'] = 'users';\n\n        delete currentUser['__v'];\n        delete currentUser['isDeleted'];\n        delete currentUser['salt'];\n\n        res.send({\n          dn,\n          attributes: currentUser,\n        });\n      } else {\n        users = await findUsers(queryOptions);\n        for (var i = 0; i < users.length; i++) {\n          const currentUser: any = users[i];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          req.users[dn] = {\n            dn,\n            attributes: currentUser,\n          };\n\n          Object.keys(req.users).forEach(function(key) {\n            if (req.filter.matches(req.users[key].attributes)) {\n              res.send(req.users[key]);\n            }\n          });\n        }\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.ConstraintViolationError('cn required'));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (users && users.length > 0) {\n        return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n      }\n\n      try {\n        const authing = await new Authing({\n          clientId: req.currentClientId,\n          secret: client.secret,\n        });\n\n        await authing.register({\n          username: cn.value,\n          nickname: cn.value,\n          unionid: `ldap|${cn.value}`,\n          registerMethod: `ldap:sso::from-ldapadd`,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n      const cn = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      const users = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      try {\n        await removeUser({\n          registerInClient: ObjectId(req.currentClientId),\n          username: cn.value,\n        });\n      } catch (error) {\n        return next(new ldap.UnavailableError(error.toString()));\n      }\n\n      res.end();\n      return next();\n    });\n\n    server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n      // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n      const cn: any = req.dn.rdns[0].attrs.cn;\n      if (!req.dn.rdns[0].attrs.cn)\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n      if (!req.changes.length)\n        return next(new ldap.ProtocolError('changes required'));\n\n      const users: any = await findUsers({\n        registerInClient: ObjectId(req.currentClientId),\n        isDeleted: false,\n        username: cn.value,\n      });\n\n      if (!users || users.length === 0) {\n        return next(new ldap.NoSuchObjectError(req.dn.toString()));\n      }\n\n      const user: any = users[0];\n\n      let mod: any, authing: any;\n\n      for (var i = 0; i < req.changes.length; i++) {\n        mod = req.changes[i].modification;\n        switch (req.changes[i].operation) {\n          case 'replace':\n            const typeMapping: any = {\n              userpassword: 'password',\n              mail: 'email',\n              cn: ['username'],\n            };\n            // 不允许修改密码，因为无法提供 oldPassword，日后可以改善下\n            const notAllowedTypes = ['gid', 'uid', '_id', 'userpassword'];\n            if (notAllowedTypes.indexOf(mod.type) > -1) {\n              return next(\n                new ldap.UnwillingToPerformError(\n                  `${mod.type} is not allowed to modify`\n                )\n              );\n            }\n\n            let fieldModified: any = mod.type;\n\n            if (typeMapping[mod.type]) {\n              fieldModified = typeMapping[mod.type];\n            }\n\n            try {\n              authing =\n                authing ||\n                (await new Authing({\n                  clientId: req.currentClientId,\n                  secret: client.secret,\n                }));\n\n              if (\n                fieldModified instanceof String ||\n                typeof fieldModified === 'string'\n              ) {\n                let query: any = {\n                  _id: user._id,\n                };\n                const field: any = fieldModified;\n                query[field] = mod.vals[0];\n                await authing.update(query);\n              } else {\n                let query: any = {\n                  _id: users[0]._id,\n                };\n                for (let i = 0; i < fieldModified.length; i++) {\n                  query[fieldModified[i]] = mod.vals[0];\n                }\n                await authing.update(query);\n              }\n            } catch (error) {\n              return next(new ldap.UnavailableError(JSON.stringify(error)));\n            }\n            break;\n          case 'add':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n          case 'delete':\n            return next(\n              new ldap.UnwillingToPerformError('only replace allowed')\n            );\n        }\n      }\n\n      res.end();\n      return next();\n    });\n  };\n\n  findClients((clients: any) => {\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n      initLdapRoutes(client);\n    }\n\n    const collection = db.collection('userclients');\n    const changeStream = collection.watch();\n    changeStream.on('change', (oplog: any) => {\n      // process next document\n      const operationType = oplog.operationType;\n      if (operationType === 'insert') {\n        const client = oplog.fullDocument;\n        console.log('add client to ldap', client);\n        initLdapRoutes(client);\n      }\n    });\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","parseDN","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","replicaSet","addr","dbname","name","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","findClients","callback","clients","isDeleted","removeUser","query","_resolve","_reject","updateOne","$set","then","users","catch","initLdapRoutes","bindDN","_id","SUFFIX","bind","_req","res","next","o","dn","rdns","attrs","currentClientId","value","i","length","rdn","key","toString","dnString","indexOf","uid","registerInClient","authing","clientId","secret","loginOpt","username","credentials","login","error","InvalidCredentialsError","JSON","stringify","end","authorize","_res","connection","equals","InsufficientAccessRightsError","loadCurrentClientId","req","pre","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","changeStream","watch","on","oplog","operationType","fullDocument","listen"],"mappings":"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"}