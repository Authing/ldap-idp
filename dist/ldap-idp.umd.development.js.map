{"version":3,"file":"ldap-idp.umd.development.js","sources":["../src/index.ts"],"sourcesContent":["const ldap = require('ldapjs');\nconst parseDN = require('ldapjs').parseDN;\nconst fs = require('fs');\nconst MongoClient = require('mongodb').MongoClient;\nconst ObjectId = require('mongodb').ObjectId;\nconst ldapdb = require('./ldapdb.json');\n\nconst assert = require('assert');\n\nconst Authing = require('authing-js-sdk');\n\n// Connection URL\nconst url = [\n  'mongodb://',\n  ldapdb.user + ':' + ldapdb.password + '@',\n  ldapdb.ip,\n  ':',\n  ldapdb.port,\n  '/',\n  ldapdb.dbname,\n].join('');\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(_err: any, client: any) {\n  assert.equal(null, _err);\n\n  console.log('Connected successfully to server');\n\n  const db = client.db(ldapdb.dbname);\n  createLDAPServer(db);\n  // client.close();\n});\n\nconst createLDAPServer = (db: any) => {\n  const server: any = ldap.createServer();\n\n  const findUsers: any = function(opts: any) {\n    return new Promise((resolve: any, reject: any) => {\n      const collection = db.collection('users');\n      opts['isDeleted'] = false;\n      collection.find(opts).toArray(function(err: any, docs: any) {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  };\n\n  const findClients: any = function(callback: any) {\n    const clients = db.collection('userclients');\n    clients\n      .find({\n        isDeleted: false,\n      })\n      .toArray(function(err: any, docs: any) {\n        assert.equal(err, null);\n        callback(docs);\n      });\n  };\n\n  const removeUser: any = function(query: any) {\n    return new Promise((_resolve: any, _reject: any) => {\n      const collection = db.collection('users');\n      query['isDeleted'] = false;\n      collection.updateOne(query, {\n        $set: {\n          isDeleted: true,\n        },\n      });\n      findUsers(query)\n        .then((users: any) => {\n          _resolve(users);\n        })\n        .catch((err: any) => {\n          _reject(err);\n        });\n    });\n  };\n\n  // const updateUser: any = function(query: any, set: any) {\n  //   return new Promise((_resolve: any, _reject: any) => {\n  //     const collection = db.collection('users');\n  //     query['isDeleted'] = false;\n  //     collection.updateOne(query, set);\n  //     findUsers(query)\n  //       .then((users: any) => {\n  //         _resolve(users);\n  //       })\n  //       .catch((err: any) => {\n  //         _reject(err);\n  //       });\n  //   });\n  // };\n\n  findClients((clients: any) => {\n    const loadCurrentClientId = (req: any, _res: any, next: any) => {\n      req.currentClientId = '';\n      const rdns: any = req.dn.rdns;\n      for (let i = 0; i < rdns.length; i++) {\n        const rdn = rdns[i];\n        for (let key in rdn.attrs) {\n          if (key === 'o') {\n            req.currentClientId = rdn.attrs.o.value;\n          }\n        }\n      }\n      return next();\n    };\n\n    for (let i = 0; i < clients.length; i++) {\n      const client = clients[i] || {};\n\n      let bindDN: string = `ou=users,o=${client._id},dc=authing,dc=cn`;\n      const SUFFIX: string = `ou=users, o=${client._id}, dc=authing, dc=cn`;\n\n      /*\n        DN = uid=LDAP_BINDING_USER（邮箱或者手机号）,ou=Users,o=AUTHING_CLINET_ID,dc=authing,dc=cn\n        ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=18000179176\n      */\n\n      server.bind(bindDN, async function(_req: any, res: any, next: any) {\n        const o: any = _req.dn.rdns[1].attrs;\n        let currentClientId: any = '';\n        if (o['o']) {\n          currentClientId = o.o.value;\n        } else {\n          const rdns: any = _req.dn.rdns;\n          for (let i = 0; i < rdns.length; i++) {\n            const rdn = rdns[i];\n            for (let key in rdn.attrs) {\n              if (key === 'o') {\n                currentClientId = rdn.attrs.o.value;\n              }\n            }\n          }\n        }\n\n        console.log(_req.dn.rdns.toString());\n\n        const dnString = _req.dn.rdns.toString();\n\n        /*\n          需要分两种类型进行验证\n          1. 只用 client 进行查询，使用 secret 进行验证\n          2. 对单个用户进行查询，使用用户真实密码进行验证\n        */\n\n        if (dnString.indexOf('uid=') > -1) {\n          try {\n            const rdns: any = _req.dn.rdns;\n            let uid: string = '';\n            for (let i = 0; i < rdns.length; i++) {\n              const rdn = rdns[i];\n              for (let key in rdn.attrs) {\n                if (key === 'uid') {\n                  uid = rdn.attrs.uid.value;\n                }\n              }\n            }\n\n            const users: any = await findUsers({\n              registerInClient: ObjectId(currentClientId),\n              _id: ObjectId(uid),\n            });\n\n            const user: any = users[0];\n\n            if (user.password) {\n              if (currentClientId.toString() === client._id.toString()) {\n                const authing = await new Authing({\n                  clientId: currentClientId,\n                  secret: client.secret,\n                });\n\n                const loginOpt = {\n                  username: user.username,\n                  password: _req.credentials,\n                };\n                await authing.login(loginOpt);\n              }\n            }\n          } catch (error) {\n            return next(\n              new ldap.InvalidCredentialsError(JSON.stringify(error))\n            );\n          }\n        } else {\n          if (\n            !(\n              currentClientId.toString() === client._id.toString() &&\n              _req.credentials.toString() === client.secret.toString()\n            )\n          ) {\n            return next(new ldap.InvalidCredentialsError());\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      const authorize = (_req: any, _res: any, next: any) => {\n        if (!_req.connection.ldap.bindDN.equals(bindDN))\n          return next(new ldap.InsufficientAccessRightsError());\n        return next();\n      };\n\n      const pre: any = [authorize, loadCurrentClientId];\n\n      server.search(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapsearch -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -LLL -b \"ou=users,o=59f86b4832eb28071bdd9214,dc=authing,dc=cn\" cn=ldap-tester\n\n        const filterKey: any = req.filter.attribute;\n        const filterValue: any = req.filter.value || '*';\n\n        // const queryDN = req.dn.toString();\n\n        const filterKeyMapping: any = {\n          cn: 'username',\n          gid: '_id',\n          uid: '_id',\n        };\n\n        let queryOptions: any = {\n          registerInClient: ObjectId(req.currentClientId),\n        };\n\n        let users: any;\n        req.users = {};\n\n        if (filterKeyMapping[filterKey]) {\n          const key: any = filterKeyMapping[filterKey];\n          queryOptions[key] =\n            key === '_id' ? ObjectId(filterValue) : filterValue;\n          users = await findUsers(queryOptions);\n\n          const currentUser: any = users[0];\n          const cn: any = currentUser.username;\n          const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n            req.currentClientId\n          }, dc=authing, dc=cn`;\n          currentUser['cn'] = cn;\n          currentUser['gid'] = currentUser._id;\n          currentUser['uid'] = currentUser._id;\n          currentUser['objectclass'] = 'users';\n\n          delete currentUser['__v'];\n          delete currentUser['isDeleted'];\n          delete currentUser['salt'];\n\n          res.send({\n            dn,\n            attributes: currentUser,\n          });\n        } else {\n          users = await findUsers(queryOptions);\n          for (var i = 0; i < users.length; i++) {\n            const currentUser: any = users[i];\n            const cn: any = currentUser.username;\n            const dn: string = `cn=${cn},uid=${currentUser._id}, ou=users, o=${\n              req.currentClientId\n            }, dc=authing, dc=cn`;\n            currentUser['cn'] = cn;\n            currentUser['gid'] = currentUser._id;\n            currentUser['uid'] = currentUser._id;\n            currentUser['objectclass'] = 'users';\n            delete currentUser['__v'];\n            delete currentUser['isDeleted'];\n            delete currentUser['salt'];\n\n            req.users[dn] = {\n              dn,\n              attributes: currentUser,\n            };\n\n            Object.keys(req.users).forEach(function(key) {\n              if (req.filter.matches(req.users[key].attributes)) {\n                res.send(req.users[key]);\n              }\n            });\n          }\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.add(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapadd -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./user.ldif\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.ConstraintViolationError('cn required'));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (users && users.length > 0) {\n          return next(new ldap.EntryAlreadyExistsError(req.dn.toString()));\n        }\n\n        try {\n          const authing = await new Authing({\n            clientId: req.currentClientId,\n            secret: client.secret,\n          });\n\n          await authing.register({\n            username: cn.value,\n            nickname: cn.value,\n            unionid: `ldap|${cn.value}`,\n            registerMethod: `ldap:sso::from-ldapadd`,\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.del(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapdelete -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" \"cn=ldapjs, ou=users, o=59f86b4832eb28071bdd9214, dc=authing,dc=cn\"\n        const cn = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        const users = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        try {\n          await removeUser({\n            registerInClient: ObjectId(req.currentClientId),\n            username: cn.value,\n          });\n        } catch (error) {\n          return next(new ldap.UnavailableError(error.toString()));\n        }\n\n        res.end();\n        return next();\n      });\n\n      server.modify(SUFFIX, pre, async function(req: any, res: any, next: any) {\n        // ldapmodify -H ldap://localhost:1389 -x -D \"ou=users,o=5c344f102e450b000170190a,dc=authing,dc=cn\" -w \"03bb8b2fca823137c7dec63fd0029fc2\" -f ./modify.ldif\n        const cn: any = req.dn.rdns[0].attrs.cn;\n        if (!req.dn.rdns[0].attrs.cn)\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n\n        if (!req.changes.length)\n          return next(new ldap.ProtocolError('changes required'));\n\n        const users: any = await findUsers({\n          registerInClient: ObjectId(req.currentClientId),\n          isDeleted: false,\n          username: cn.value,\n        });\n\n        if (!users || users.length === 0) {\n          return next(new ldap.NoSuchObjectError(req.dn.toString()));\n        }\n\n        const user: any = users[0];\n\n        let mod: any, authing: any;\n\n        for (var i = 0; i < req.changes.length; i++) {\n          mod = req.changes[i].modification;\n          switch (req.changes[i].operation) {\n            case 'replace':\n              const typeMapping: any = {\n                userpassword: 'password',\n                mail: 'email',\n                cn: ['username'],\n              };\n\n              const notAllowedTypes = ['gid', 'uid', '_id'];\n\n              if (notAllowedTypes.indexOf(mod.type) > -1) {\n                return next(\n                  new ldap.UnwillingToPerformError(\n                    `${mod.type} is not allowed to modify`\n                  )\n                );\n              }\n\n              let fieldModified: any = mod.type;\n\n              if (typeMapping[mod.type]) {\n                fieldModified = typeMapping[mod.type];\n              }\n\n              try {\n                authing =\n                  authing ||\n                  (await new Authing({\n                    clientId: req.currentClientId,\n                    secret: client.secret,\n                  }));\n\n                if (\n                  fieldModified instanceof String ||\n                  typeof fieldModified === 'string'\n                ) {\n                  let query: any = {\n                    _id: user._id,\n                  };\n                  const field: any = fieldModified;\n                  query[field] = mod.vals[0];\n                  await authing.update(query);\n                } else {\n                  let query: any = {\n                    _id: users[0]._id,\n                  };\n                  for (let i = 0; i < fieldModified.length; i++) {\n                    query[fieldModified[i]] = mod.vals[0];\n                  }\n                  await authing.update(query);\n                }\n              } catch (error) {\n                return next(new ldap.UnavailableError(error.toString()));\n              }\n              break;\n            case 'add':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n            case 'delete':\n              return next(\n                new ldap.UnwillingToPerformError('only replace allowed')\n              );\n          }\n        }\n\n        res.end();\n        return next();\n      });\n    }\n\n    server.listen(1389, function() {\n      console.log('LDAP server up at: %s', server.url);\n    });\n  });\n};\n"],"names":["ldap","require","parseDN","MongoClient","ObjectId","ldapdb","assert","Authing","url","user","password","ip","port","dbname","join","connect","_err","client","equal","console","log","db","createLDAPServer","server","createServer","findUsers","opts","Promise","resolve","reject","collection","find","toArray","err","docs","findClients","callback","clients","isDeleted","removeUser","query","_resolve","_reject","updateOne","$set","then","users","catch","loadCurrentClientId","req","_res","next","currentClientId","rdns","dn","i","length","rdn","key","attrs","o","value","bindDN","_id","SUFFIX","bind","_req","res","toString","dnString","indexOf","uid","registerInClient","authing","clientId","secret","loginOpt","username","credentials","login","error","InvalidCredentialsError","JSON","stringify","end","authorize","connection","equals","InsufficientAccessRightsError","pre","search","filterKey","filter","attribute","filterValue","filterKeyMapping","cn","gid","queryOptions","currentUser","send","attributes","Object","keys","forEach","matches","add","ConstraintViolationError","EntryAlreadyExistsError","register","nickname","unionid","registerMethod","UnavailableError","del","NoSuchObjectError","modify","changes","ProtocolError","mod","modification","operation","typeMapping","userpassword","mail","notAllowedTypes","type","UnwillingToPerformError","fieldModified","String","field","vals","update","listen"],"mappings":"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"}